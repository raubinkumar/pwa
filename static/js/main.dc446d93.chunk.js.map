{"version":3,"sources":["components/Login/index.jsx","logo.svg","components/Landing/actions.js","common/routeConstants.js","common/Routes.js","components/Landing/index.jsx","components/Landing/landingSlice.js","redux/rootReducer.js","redux/store.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Login","props","landingPageAction","createAction","ROUTES","LOGIN","LANDING","Routes","path","protected","component","dispatch","useDispatch","data","useSelector","state","landing","useEffect","Date","date","toDateString","LandingInitialState","landingReducer","createSlice","name","initialState","extraReducers","action","payload","appReducer","combineReducers","logger","createLogger","store","configureStore","reducer","type","undefined","middleware","getDefaultMiddleware","App","Object","keys","map","route","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dc446d93.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Login = (props) => {\r\n  return \"Login Page\";\r\n};\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const landingPageAction = createAction(\"landing/action1\");\r\n","const ROUTES = {\r\n  LOGIN: \"/login\",\r\n  LANDING: \"/\",\r\n};\r\n\r\nexport default ROUTES;\r\n","import Login from \"../components/Login\";\r\nimport Landing from \"../components/Landing\";\r\nimport ROUTES from \"./routeConstants\";\r\n\r\nconst Routes = {\r\n  LANDING: { path: ROUTES.LANDING, protected: true, component: Landing },\r\n  LOGIN: {\r\n    path: ROUTES.LOGIN,\r\n    protected: false,\r\n    component: Login,\r\n  },\r\n};\r\n\r\nexport default Routes;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { landingPageAction } from \"./actions\";\r\n\r\nconst Landing = (props) => {\r\n  const dispatch = useDispatch();\r\n  const data = useSelector((state) => state.landing);\r\n  useEffect(() => {\r\n    dispatch(landingPageAction(new Date()));\r\n  }, []);\r\n  return (\r\n    <div>\r\n      Langing Page Loaded with redux at: {data.date && data.date.toDateString()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { landingPageAction } from \"./actions\";\r\n\r\nexport const LandingInitialState = {};\r\n\r\nconst landingReducer = createSlice({\r\n  name: \"landing\",\r\n  initialState: LandingInitialState,\r\n  extraReducers: {\r\n    [landingPageAction]: (state, action) => {\r\n      state.date = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default landingReducer.reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport landingReducer, {\r\n  LandingInitialState,\r\n} from \"../components/Landing/landingSlice\";\r\n\r\nconst appReducer = combineReducers({\r\n  landing: landingReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === \"login/logout\") {\r\n    state = undefined;\r\n  }\r\n  return appReducer(state, action);\r\n};\r\n\r\nconst initialState = {\r\n  landing: LandingInitialState,\r\n};\r\n\r\nexport { rootReducer, initialState };\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: [\r\n    ...getDefaultMiddleware({\r\n    }),\r\n    logger,\r\n  ],\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Routes from \"./common/Routes\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport store from \"./redux/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          {Object.keys(Routes).map((route) => {\r\n            let component = Routes[route].component;\r\n            return (\r\n              <Route\r\n                path={Routes[route].path}\r\n                exact={true}\r\n                key={Routes[route].path}\r\n                component={component}\r\n              />\r\n            );\r\n          })}\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  debugger;\r\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n  if (\"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}